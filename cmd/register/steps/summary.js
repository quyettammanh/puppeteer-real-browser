async function stepSummary(page, user) {
    try{
        console.log("X·ª≠ l√Ω b∆∞·ªõc summary");
        await stepConfirmDone(page, user);
        return true;
    }catch(error){
        console.error("Error in stepSummary:", error);
        return false;
    }

}
async function stepConfirmDone(page, user) {
    // g·ª≠i t·∫°o link ch·ª©a cookies ƒë·ªÉ g·ª≠i ƒë·∫øn telegram
    try {
        console.log("Chu·∫©n b·ªã g·ª≠i link ch·ª©a cookies ƒë·∫øn Telegram");
        await stopRegisterAndSendTele(page, user);
        return true;
    } catch (error) {
        console.error("Error in stepConfirmDone while sending to Telegram:", error);
    }
}

async function stopRegisterAndSendTele(page, user) {
    console.log("üöÄ ƒê√£ d·ª´ng ƒëƒÉng k√Ω v√† g·ª≠i th√¥ng b√°o");
    const urlSuccess = await createLinkSendTele(page);

    // Check if URL contains error or warning
    if (!urlSuccess.toLowerCase().includes('error') && !urlSuccess.toLowerCase().includes('warning')) {
        await sendTelegramMessage(`üöÄ ${user?.email || 'User'} c·∫ßn x·ª≠ l√Ω th·ªß c√¥ng: ${urlSuccess}`);
        console.log("üöÄ ƒê√£ g·ª≠i th√¥ng b√°o cho telegram");
    } else {
        console.log("‚ùå Kh√¥ng g·ª≠i th√¥ng b√°o do URL ch·ª©a error ho·∫∑c warning");
    }
}

async function createLinkSendTele(page) {
    try {
        // B∆∞·ªõc 1: L·∫•y URL hi·ªán t·∫°i c·ªßa trang
        const currentUrl = page.url();
        console.log("\nüåê Current URL:", currentUrl);

        // B∆∞·ªõc 2: L·∫•y t·∫•t c·∫£ cookies t·ª´ trang
        const cookies = await page.evaluate(() => {
            return document.cookie.split(';').map(cookie => {
                const [name, value] = cookie.trim().split('=');
                return { name, value };
            });
        });
        // B∆∞·ªõc 3: T·∫°o URL m·ªõi ch·ª©a cookies
        const urlWithCookies = addCookiesToUrl(currentUrl, cookies);
        console.log("\nüîó URL with cookies:", urlWithCookies);

        // Tr·∫£ v·ªÅ URL ch·ª©a cookies
        return urlWithCookies;
    } catch (error) {
        console.error("\n‚ùå Error in createLinkConfirm:", error);
        throw error;
    }
}

// H√†m h·ªó tr·ª£: Th√™m cookies v√†o URL d∆∞·ªõi d·∫°ng query parameters
function addCookiesToUrl(url, cookies) {
    const urlObj = new URL(url);

    // Th√™m t·ª´ng cookie v√†o URL d∆∞·ªõi d·∫°ng query parameters
    cookies.forEach(cookie => {
        urlObj.searchParams.append(cookie.name, cookie.value);
    });

    return urlObj.toString();
}

// async function createLinkSendTele(page) {
//     try {
//         // B∆∞·ªõc 1: L·∫•y URL hi·ªán t·∫°i c·ªßa trang
//         const currentUrl = page.url();
//         console.log("\nüåê Current URL:", currentUrl);

//         // B∆∞·ªõc 2: L·∫•y t·∫•t c·∫£ cookies t·ª´ trang
//         const cookies = await page.cookies();
//         console.log("\nüç™ Got cookies, count:", cookies.length);
        
//         // B∆∞·ªõc 3: T·∫°o URL m·ªõi ch·ª©a cookies
//         const urlWithCookies = addCookiesToUrl(currentUrl, cookies);
//         console.log("\nüîó URL with cookies:", urlWithCookies);

//         // Tr·∫£ v·ªÅ URL ch·ª©a cookies
//         return urlWithCookies;
//     } catch (error) {
//         console.error("\n‚ùå Error in createLinkConfirm:", error);
//         return "error: " + error.message;
//     }
// }

// function addCookiesToUrl(url, cookies) {
//     // Create a new URL object from the original URL
//     const urlObj = new URL(url);
    
//     // Add each cookie as a query parameter
//     cookies.forEach(cookie => {
//         if (cookie.name && cookie.value) {
//             // Encode the cookie name and value to ensure they are URL-safe
//             urlObj.searchParams.append(
//                 encodeURIComponent(`cookie_${cookie.name}`),
//                 encodeURIComponent(cookie.value)
//             );
//         }
//     });
    
//     // Return the new URL as a string
//     return urlObj.toString();
// }

async function stepConfirmDone1(page) {
    try {
        console.log("ƒê√£ ki·ªÉm tra th√¥ng tin");
        
        // S·ª≠ d·ª•ng CSS selector thay v√¨ XPath
        const cssSelector = 'button.cs-button--arrow_next';
        console.log("ƒêang ch·ªù n√∫t thanh to√°n xu·∫•t hi·ªán...");
        
        try {
            // ƒê·ª£i n√∫t xu·∫•t hi·ªán v·ªõi timeout
            await page.waitForSelector(cssSelector, { visible: true, timeout: 10000 });
        } catch (timeoutError) {
            console.log("H·∫øt th·ªùi gian ch·ªù n√∫t thanh to√°n xu·∫•t hi·ªán");
            return false;
        }
        
        // Ki·ªÉm tra xem n√∫t c√≥ t·ªìn t·∫°i kh√¥ng
        const buttonExists = await page.$(cssSelector);
        
        if (buttonExists) {
            console.log("t√¨m th·∫•y n√∫t thanh to√°n");
            const isDev = process.env.NODE_ENV;

            // S·ª≠ d·ª•ng evaluate ƒë·ªÉ scroll v√† ƒë·∫£m b·∫£o n√∫t c√≥ th·ªÉ nh√¨n th·∫•y
            await page.evaluate((isDev) => {
                const button = document.querySelector('button.cs-button--arrow_next');
                if (isDev !== 'development' && button) {
                    button.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                return new Promise(resolve => setTimeout(resolve, 300));
            }, isDev);

            // B·∫•m n√∫t v√† ƒë·ª£i ƒëi·ªÅu h∆∞·ªõng trang
            console.log("B·∫•m n√∫t thanh to√°n v√† ƒë·ª£i t·∫£i trang...");
            
            try {
                // C√°ch an to√†n h∆°n khi x·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng trong Puppeteer
                const navigationPromise = page.waitForNavigation({ 
                    timeout: 30000,
                    waitUntil: 'networkidle0'
                });
                
                await page.click(cssSelector);
                await navigationPromise;
                
                console.log("ƒê√£ b·∫•m n√∫t thanh to√°n v√† ho√†n t·∫•t t·∫£i trang");
                return true;
            } catch (navigationError) {
                console.error("L·ªói khi ƒëi·ªÅu h∆∞·ªõng trang:", navigationError.message);
                return false;
            }
        } else {
            console.log("Kh√¥ng t√¨m th·∫•y n√∫t thanh to√°n");
            return false;
        }
    } catch (error) {
        if (!error.message.includes('Target page, context or browser has been closed')) {
            console.error("Error in stepConfirmDone:", error);
        }
        return false;
    }
}

// Import the sendTelegramMessage function
const { sendTelegramMessage } = require('../../utils/notification_tele');

module.exports = {
    stepSummary,
}